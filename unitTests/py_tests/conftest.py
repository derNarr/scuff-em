#!/usr/bin/env python3
# -*- encoding: utf-8 -*-

from __future__ import print_function

import os
import tempfile
import shutil
import sys

import pytest


TEMP_DIR = tempfile.mkdtemp(prefix="scuffem_pytests_")

SCUFF_CASPOL_CMD = "scuff-caspol "
DATA = "./data"

RELTOL = 0.1  # relative tolerance
RELTOL_VALIDATE = 0.30  # relative tolerance for validation code


def pytest_addoption(parser):
    parser.addoption("--runslow", action="store_true", help="run slow tests")
    parser.addoption("--validate-scuff", action="store_true",
                     help="run tests to validate scuff-em")


def pytest_runtest_setup(item):
    if 'slow' in item.keywords and not item.config.getoption("--runslow"):
        pytest.skip("need --runslow option to run")
    if 'validation' in item.keywords and not item.config.getoption("--validate-scuff"):
        pytest.skip("need --validate-scuff option to run")


def pytest_report_header(config):
    return "temporary files are stored in {path}".format(path=TEMP_DIR)


@pytest.fixture(scope="session")
def create_temp(request):
    """
    Allocate empty temporary directory to store files that will be generated by
    the tests. Remove the temporary files in the end (not at the moment).

    """
    old_path = os.getcwd()
    print(old_path)
    path = TEMP_DIR
    try:
        for file_ in os.listdir(DATA):
            shutil.copy(os.path.join(DATA, file_), path)
    except:
        pytest.fail("HINT: py.test must be invoked inside the top level ./unitTests/py_tests folder.")
        raise
    os.chdir(path)
    def fin():
        os.chdir(old_path)
        print("temporary files are in {path}".format(path=path), file=sys.stderr)
        #os.rmdir(path)
    request.addfinalizer(fin)
    print("scuff-caspol tests run in {path}".format(path=path), file=sys.stderr)
    return path

